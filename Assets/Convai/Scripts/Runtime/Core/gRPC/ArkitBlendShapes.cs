// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc/arkit_blend_shapes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Service {

  /// <summary>Holder for reflection information generated from rpc/arkit_blend_shapes.proto</summary>
  public static partial class ArkitBlendShapesReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc/arkit_blend_shapes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArkitBlendShapesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxycGMvYXJraXRfYmxlbmRfc2hhcGVzLnByb3RvEgdzZXJ2aWNlIk4KFEFS",
            "S2l0QmxlbmRTaGFwZXNEYXRhEjYKE2FyX2tpdF9ibGVuZF9zaGFwZXMYASAB",
            "KAsyGS5zZXJ2aWNlLkFSS2l0QmxlbmRTaGFwZXMi9AoKEEFSS2l0QmxlbmRT",
            "aGFwZXMSFgoOYnJvd19kb3duX2xlZnQYASABKAISFwoPYnJvd19kb3duX3Jp",
            "Z2h0GAIgASgCEhUKDWJyb3dfaW5uZXJfdXAYAyABKAISGgoSYnJvd19vdXRl",
            "cl91cF9sZWZ0GAQgASgCEhsKE2Jyb3dfb3V0ZXJfdXBfcmlnaHQYBSABKAIS",
            "EgoKY2hlZWtfcHVmZhgGIAEoAhIZChFjaGVla19zcXVpbnRfbGVmdBgHIAEo",
            "AhIaChJjaGVla19zcXVpbnRfcmlnaHQYCCABKAISFgoOZXllX2JsaW5rX2xl",
            "ZnQYCSABKAISFwoPZXllX2JsaW5rX3JpZ2h0GAogASgCEhoKEmV5ZV9sb29r",
            "X2Rvd25fbGVmdBgLIAEoAhIbChNleWVfbG9va19kb3duX3JpZ2h0GAwgASgC",
            "EhgKEGV5ZV9sb29rX2luX2xlZnQYDSABKAISGQoRZXllX2xvb2tfaW5fcmln",
            "aHQYDiABKAISGQoRZXllX2xvb2tfb3V0X2xlZnQYDyABKAISGgoSZXllX2xv",
            "b2tfb3V0X3JpZ2h0GBAgASgCEhgKEGV5ZV9sb29rX3VwX2xlZnQYESABKAIS",
            "GQoRZXllX2xvb2tfdXBfcmlnaHQYEiABKAISFwoPZXllX3NxdWludF9sZWZ0",
            "GBMgASgCEhgKEGV5ZV9zcXVpbnRfcmlnaHQYFCABKAISFQoNZXllX3dpZGVf",
            "bGVmdBgVIAEoAhIWCg5leWVfd2lkZV9yaWdodBgWIAEoAhITCgtqYXdfZm9y",
            "d2FyZBgXIAEoAhIQCghqYXdfbGVmdBgYIAEoAhIQCghqYXdfb3BlbhgZIAEo",
            "AhIRCglqYXdfcmlnaHQYGiABKAISEwoLbW91dGhfY2xvc2UYGyABKAISGQoR",
            "bW91dGhfZGltcGxlX2xlZnQYHCABKAISGgoSbW91dGhfZGltcGxlX3JpZ2h0",
            "GB0gASgCEhgKEG1vdXRoX2Zyb3duX2xlZnQYHiABKAISGQoRbW91dGhfZnJv",
            "d25fcmlnaHQYHyABKAISFAoMbW91dGhfZnVubmVsGCAgASgCEhIKCm1vdXRo",
            "X2xlZnQYISABKAISHQoVbW91dGhfbG93ZXJfZG93bl9sZWZ0GCIgASgCEh4K",
            "Fm1vdXRoX2xvd2VyX2Rvd25fcmlnaHQYIyABKAISGAoQbW91dGhfcHJlc3Nf",
            "bGVmdBgkIAEoAhIZChFtb3V0aF9wcmVzc19yaWdodBglIAEoAhIUCgxtb3V0",
            "aF9wdWNrZXIYJiABKAISEwoLbW91dGhfcmlnaHQYJyABKAISGAoQbW91dGhf",
            "cm9sbF9sb3dlchgoIAEoAhIYChBtb3V0aF9yb2xsX3VwcGVyGCkgASgCEhkK",
            "EW1vdXRoX3NocnVnX2xvd2VyGCogASgCEhkKEW1vdXRoX3NocnVnX3VwcGVy",
            "GCsgASgCEhgKEG1vdXRoX3NtaWxlX2xlZnQYLCABKAISGQoRbW91dGhfc21p",
            "bGVfcmlnaHQYLSABKAISGgoSbW91dGhfc3RyZXRjaF9sZWZ0GC4gASgCEhsK",
            "E21vdXRoX3N0cmV0Y2hfcmlnaHQYLyABKAISGwoTbW91dGhfdXBwZXJfdXBf",
            "bGVmdBgwIAEoAhIcChRtb3V0aF91cHBlcl91cF9yaWdodBgxIAEoAhIXCg9u",
            "b3NlX3NuZWVyX2xlZnQYMiABKAISGAoQbm9zZV9zbmVlcl9yaWdodBgzIAEo",
            "AhISCgp0b25ndWVfb3V0GDQgASgCEhEKCWhlYWRfcm9sbBg1IAEoAhISCgpo",
            "ZWFkX3BpdGNoGDYgASgCEhAKCGhlYWRfeWF3GDcgASgCImMKD0JsZW5kc2hh",
            "cGVGcmFtZRITCgtmcmFtZV9pbmRleBgBIAEoBRILCgNmcHMYAiABKAISLgoL",
            "YmxlbmRzaGFwZXMYAyABKAsyGS5zZXJ2aWNlLkFSS2l0QmxlbmRTaGFwZXNi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.ARKitBlendShapesData), global::Service.ARKitBlendShapesData.Parser, new[]{ "ArKitBlendShapes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.ARKitBlendShapes), global::Service.ARKitBlendShapes.Parser, new[]{ "BrowDownLeft", "BrowDownRight", "BrowInnerUp", "BrowOuterUpLeft", "BrowOuterUpRight", "CheekPuff", "CheekSquintLeft", "CheekSquintRight", "EyeBlinkLeft", "EyeBlinkRight", "EyeLookDownLeft", "EyeLookDownRight", "EyeLookInLeft", "EyeLookInRight", "EyeLookOutLeft", "EyeLookOutRight", "EyeLookUpLeft", "EyeLookUpRight", "EyeSquintLeft", "EyeSquintRight", "EyeWideLeft", "EyeWideRight", "JawForward", "JawLeft", "JawOpen", "JawRight", "MouthClose", "MouthDimpleLeft", "MouthDimpleRight", "MouthFrownLeft", "MouthFrownRight", "MouthFunnel", "MouthLeft", "MouthLowerDownLeft", "MouthLowerDownRight", "MouthPressLeft", "MouthPressRight", "MouthPucker", "MouthRight", "MouthRollLower", "MouthRollUpper", "MouthShrugLower", "MouthShrugUpper", "MouthSmileLeft", "MouthSmileRight", "MouthStretchLeft", "MouthStretchRight", "MouthUpperUpLeft", "MouthUpperUpRight", "NoseSneerLeft", "NoseSneerRight", "TongueOut", "HeadRoll", "HeadPitch", "HeadYaw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.BlendshapeFrame), global::Service.BlendshapeFrame.Parser, new[]{ "FrameIndex", "Fps", "Blendshapes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ARKitBlendShapesData : pb::IMessage<ARKitBlendShapesData> {
    private static readonly pb::MessageParser<ARKitBlendShapesData> _parser = new pb::MessageParser<ARKitBlendShapesData>(() => new ARKitBlendShapesData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ARKitBlendShapesData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.ArkitBlendShapesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapesData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapesData(ARKitBlendShapesData other) : this() {
      arKitBlendShapes_ = other.arKitBlendShapes_ != null ? other.arKitBlendShapes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapesData Clone() {
      return new ARKitBlendShapesData(this);
    }

    /// <summary>Field number for the "ar_kit_blend_shapes" field.</summary>
    public const int ArKitBlendShapesFieldNumber = 1;
    private global::Service.ARKitBlendShapes arKitBlendShapes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.ARKitBlendShapes ArKitBlendShapes {
      get { return arKitBlendShapes_; }
      set {
        arKitBlendShapes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ARKitBlendShapesData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ARKitBlendShapesData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArKitBlendShapes, other.ArKitBlendShapes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (arKitBlendShapes_ != null) hash ^= ArKitBlendShapes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (arKitBlendShapes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArKitBlendShapes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (arKitBlendShapes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArKitBlendShapes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ARKitBlendShapesData other) {
      if (other == null) {
        return;
      }
      if (other.arKitBlendShapes_ != null) {
        if (arKitBlendShapes_ == null) {
          ArKitBlendShapes = new global::Service.ARKitBlendShapes();
        }
        ArKitBlendShapes.MergeFrom(other.ArKitBlendShapes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (arKitBlendShapes_ == null) {
              ArKitBlendShapes = new global::Service.ARKitBlendShapes();
            }
            input.ReadMessage(ArKitBlendShapes);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing the intensity of each ARKit blendshape.
  /// </summary>
  public sealed partial class ARKitBlendShapes : pb::IMessage<ARKitBlendShapes> {
    private static readonly pb::MessageParser<ARKitBlendShapes> _parser = new pb::MessageParser<ARKitBlendShapes>(() => new ARKitBlendShapes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ARKitBlendShapes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.ArkitBlendShapesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapes(ARKitBlendShapes other) : this() {
      browDownLeft_ = other.browDownLeft_;
      browDownRight_ = other.browDownRight_;
      browInnerUp_ = other.browInnerUp_;
      browOuterUpLeft_ = other.browOuterUpLeft_;
      browOuterUpRight_ = other.browOuterUpRight_;
      cheekPuff_ = other.cheekPuff_;
      cheekSquintLeft_ = other.cheekSquintLeft_;
      cheekSquintRight_ = other.cheekSquintRight_;
      eyeBlinkLeft_ = other.eyeBlinkLeft_;
      eyeBlinkRight_ = other.eyeBlinkRight_;
      eyeLookDownLeft_ = other.eyeLookDownLeft_;
      eyeLookDownRight_ = other.eyeLookDownRight_;
      eyeLookInLeft_ = other.eyeLookInLeft_;
      eyeLookInRight_ = other.eyeLookInRight_;
      eyeLookOutLeft_ = other.eyeLookOutLeft_;
      eyeLookOutRight_ = other.eyeLookOutRight_;
      eyeLookUpLeft_ = other.eyeLookUpLeft_;
      eyeLookUpRight_ = other.eyeLookUpRight_;
      eyeSquintLeft_ = other.eyeSquintLeft_;
      eyeSquintRight_ = other.eyeSquintRight_;
      eyeWideLeft_ = other.eyeWideLeft_;
      eyeWideRight_ = other.eyeWideRight_;
      jawForward_ = other.jawForward_;
      jawLeft_ = other.jawLeft_;
      jawOpen_ = other.jawOpen_;
      jawRight_ = other.jawRight_;
      mouthClose_ = other.mouthClose_;
      mouthDimpleLeft_ = other.mouthDimpleLeft_;
      mouthDimpleRight_ = other.mouthDimpleRight_;
      mouthFrownLeft_ = other.mouthFrownLeft_;
      mouthFrownRight_ = other.mouthFrownRight_;
      mouthFunnel_ = other.mouthFunnel_;
      mouthLeft_ = other.mouthLeft_;
      mouthLowerDownLeft_ = other.mouthLowerDownLeft_;
      mouthLowerDownRight_ = other.mouthLowerDownRight_;
      mouthPressLeft_ = other.mouthPressLeft_;
      mouthPressRight_ = other.mouthPressRight_;
      mouthPucker_ = other.mouthPucker_;
      mouthRight_ = other.mouthRight_;
      mouthRollLower_ = other.mouthRollLower_;
      mouthRollUpper_ = other.mouthRollUpper_;
      mouthShrugLower_ = other.mouthShrugLower_;
      mouthShrugUpper_ = other.mouthShrugUpper_;
      mouthSmileLeft_ = other.mouthSmileLeft_;
      mouthSmileRight_ = other.mouthSmileRight_;
      mouthStretchLeft_ = other.mouthStretchLeft_;
      mouthStretchRight_ = other.mouthStretchRight_;
      mouthUpperUpLeft_ = other.mouthUpperUpLeft_;
      mouthUpperUpRight_ = other.mouthUpperUpRight_;
      noseSneerLeft_ = other.noseSneerLeft_;
      noseSneerRight_ = other.noseSneerRight_;
      tongueOut_ = other.tongueOut_;
      headRoll_ = other.headRoll_;
      headPitch_ = other.headPitch_;
      headYaw_ = other.headYaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ARKitBlendShapes Clone() {
      return new ARKitBlendShapes(this);
    }

    /// <summary>Field number for the "brow_down_left" field.</summary>
    public const int BrowDownLeftFieldNumber = 1;
    private float browDownLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrowDownLeft {
      get { return browDownLeft_; }
      set {
        browDownLeft_ = value;
      }
    }

    /// <summary>Field number for the "brow_down_right" field.</summary>
    public const int BrowDownRightFieldNumber = 2;
    private float browDownRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrowDownRight {
      get { return browDownRight_; }
      set {
        browDownRight_ = value;
      }
    }

    /// <summary>Field number for the "brow_inner_up" field.</summary>
    public const int BrowInnerUpFieldNumber = 3;
    private float browInnerUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrowInnerUp {
      get { return browInnerUp_; }
      set {
        browInnerUp_ = value;
      }
    }

    /// <summary>Field number for the "brow_outer_up_left" field.</summary>
    public const int BrowOuterUpLeftFieldNumber = 4;
    private float browOuterUpLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrowOuterUpLeft {
      get { return browOuterUpLeft_; }
      set {
        browOuterUpLeft_ = value;
      }
    }

    /// <summary>Field number for the "brow_outer_up_right" field.</summary>
    public const int BrowOuterUpRightFieldNumber = 5;
    private float browOuterUpRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrowOuterUpRight {
      get { return browOuterUpRight_; }
      set {
        browOuterUpRight_ = value;
      }
    }

    /// <summary>Field number for the "cheek_puff" field.</summary>
    public const int CheekPuffFieldNumber = 6;
    private float cheekPuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheekPuff {
      get { return cheekPuff_; }
      set {
        cheekPuff_ = value;
      }
    }

    /// <summary>Field number for the "cheek_squint_left" field.</summary>
    public const int CheekSquintLeftFieldNumber = 7;
    private float cheekSquintLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheekSquintLeft {
      get { return cheekSquintLeft_; }
      set {
        cheekSquintLeft_ = value;
      }
    }

    /// <summary>Field number for the "cheek_squint_right" field.</summary>
    public const int CheekSquintRightFieldNumber = 8;
    private float cheekSquintRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheekSquintRight {
      get { return cheekSquintRight_; }
      set {
        cheekSquintRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_blink_left" field.</summary>
    public const int EyeBlinkLeftFieldNumber = 9;
    private float eyeBlinkLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeBlinkLeft {
      get { return eyeBlinkLeft_; }
      set {
        eyeBlinkLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_blink_right" field.</summary>
    public const int EyeBlinkRightFieldNumber = 10;
    private float eyeBlinkRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeBlinkRight {
      get { return eyeBlinkRight_; }
      set {
        eyeBlinkRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_down_left" field.</summary>
    public const int EyeLookDownLeftFieldNumber = 11;
    private float eyeLookDownLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookDownLeft {
      get { return eyeLookDownLeft_; }
      set {
        eyeLookDownLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_down_right" field.</summary>
    public const int EyeLookDownRightFieldNumber = 12;
    private float eyeLookDownRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookDownRight {
      get { return eyeLookDownRight_; }
      set {
        eyeLookDownRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_in_left" field.</summary>
    public const int EyeLookInLeftFieldNumber = 13;
    private float eyeLookInLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookInLeft {
      get { return eyeLookInLeft_; }
      set {
        eyeLookInLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_in_right" field.</summary>
    public const int EyeLookInRightFieldNumber = 14;
    private float eyeLookInRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookInRight {
      get { return eyeLookInRight_; }
      set {
        eyeLookInRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_out_left" field.</summary>
    public const int EyeLookOutLeftFieldNumber = 15;
    private float eyeLookOutLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookOutLeft {
      get { return eyeLookOutLeft_; }
      set {
        eyeLookOutLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_out_right" field.</summary>
    public const int EyeLookOutRightFieldNumber = 16;
    private float eyeLookOutRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookOutRight {
      get { return eyeLookOutRight_; }
      set {
        eyeLookOutRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_up_left" field.</summary>
    public const int EyeLookUpLeftFieldNumber = 17;
    private float eyeLookUpLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookUpLeft {
      get { return eyeLookUpLeft_; }
      set {
        eyeLookUpLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_look_up_right" field.</summary>
    public const int EyeLookUpRightFieldNumber = 18;
    private float eyeLookUpRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeLookUpRight {
      get { return eyeLookUpRight_; }
      set {
        eyeLookUpRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_squint_left" field.</summary>
    public const int EyeSquintLeftFieldNumber = 19;
    private float eyeSquintLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeSquintLeft {
      get { return eyeSquintLeft_; }
      set {
        eyeSquintLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_squint_right" field.</summary>
    public const int EyeSquintRightFieldNumber = 20;
    private float eyeSquintRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeSquintRight {
      get { return eyeSquintRight_; }
      set {
        eyeSquintRight_ = value;
      }
    }

    /// <summary>Field number for the "eye_wide_left" field.</summary>
    public const int EyeWideLeftFieldNumber = 21;
    private float eyeWideLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeWideLeft {
      get { return eyeWideLeft_; }
      set {
        eyeWideLeft_ = value;
      }
    }

    /// <summary>Field number for the "eye_wide_right" field.</summary>
    public const int EyeWideRightFieldNumber = 22;
    private float eyeWideRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EyeWideRight {
      get { return eyeWideRight_; }
      set {
        eyeWideRight_ = value;
      }
    }

    /// <summary>Field number for the "jaw_forward" field.</summary>
    public const int JawForwardFieldNumber = 23;
    private float jawForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JawForward {
      get { return jawForward_; }
      set {
        jawForward_ = value;
      }
    }

    /// <summary>Field number for the "jaw_left" field.</summary>
    public const int JawLeftFieldNumber = 24;
    private float jawLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JawLeft {
      get { return jawLeft_; }
      set {
        jawLeft_ = value;
      }
    }

    /// <summary>Field number for the "jaw_open" field.</summary>
    public const int JawOpenFieldNumber = 25;
    private float jawOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JawOpen {
      get { return jawOpen_; }
      set {
        jawOpen_ = value;
      }
    }

    /// <summary>Field number for the "jaw_right" field.</summary>
    public const int JawRightFieldNumber = 26;
    private float jawRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JawRight {
      get { return jawRight_; }
      set {
        jawRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_close" field.</summary>
    public const int MouthCloseFieldNumber = 27;
    private float mouthClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthClose {
      get { return mouthClose_; }
      set {
        mouthClose_ = value;
      }
    }

    /// <summary>Field number for the "mouth_dimple_left" field.</summary>
    public const int MouthDimpleLeftFieldNumber = 28;
    private float mouthDimpleLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthDimpleLeft {
      get { return mouthDimpleLeft_; }
      set {
        mouthDimpleLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_dimple_right" field.</summary>
    public const int MouthDimpleRightFieldNumber = 29;
    private float mouthDimpleRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthDimpleRight {
      get { return mouthDimpleRight_; }
      set {
        mouthDimpleRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_frown_left" field.</summary>
    public const int MouthFrownLeftFieldNumber = 30;
    private float mouthFrownLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthFrownLeft {
      get { return mouthFrownLeft_; }
      set {
        mouthFrownLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_frown_right" field.</summary>
    public const int MouthFrownRightFieldNumber = 31;
    private float mouthFrownRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthFrownRight {
      get { return mouthFrownRight_; }
      set {
        mouthFrownRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_funnel" field.</summary>
    public const int MouthFunnelFieldNumber = 32;
    private float mouthFunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthFunnel {
      get { return mouthFunnel_; }
      set {
        mouthFunnel_ = value;
      }
    }

    /// <summary>Field number for the "mouth_left" field.</summary>
    public const int MouthLeftFieldNumber = 33;
    private float mouthLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthLeft {
      get { return mouthLeft_; }
      set {
        mouthLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_lower_down_left" field.</summary>
    public const int MouthLowerDownLeftFieldNumber = 34;
    private float mouthLowerDownLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthLowerDownLeft {
      get { return mouthLowerDownLeft_; }
      set {
        mouthLowerDownLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_lower_down_right" field.</summary>
    public const int MouthLowerDownRightFieldNumber = 35;
    private float mouthLowerDownRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthLowerDownRight {
      get { return mouthLowerDownRight_; }
      set {
        mouthLowerDownRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_press_left" field.</summary>
    public const int MouthPressLeftFieldNumber = 36;
    private float mouthPressLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthPressLeft {
      get { return mouthPressLeft_; }
      set {
        mouthPressLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_press_right" field.</summary>
    public const int MouthPressRightFieldNumber = 37;
    private float mouthPressRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthPressRight {
      get { return mouthPressRight_; }
      set {
        mouthPressRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_pucker" field.</summary>
    public const int MouthPuckerFieldNumber = 38;
    private float mouthPucker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthPucker {
      get { return mouthPucker_; }
      set {
        mouthPucker_ = value;
      }
    }

    /// <summary>Field number for the "mouth_right" field.</summary>
    public const int MouthRightFieldNumber = 39;
    private float mouthRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthRight {
      get { return mouthRight_; }
      set {
        mouthRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_roll_lower" field.</summary>
    public const int MouthRollLowerFieldNumber = 40;
    private float mouthRollLower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthRollLower {
      get { return mouthRollLower_; }
      set {
        mouthRollLower_ = value;
      }
    }

    /// <summary>Field number for the "mouth_roll_upper" field.</summary>
    public const int MouthRollUpperFieldNumber = 41;
    private float mouthRollUpper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthRollUpper {
      get { return mouthRollUpper_; }
      set {
        mouthRollUpper_ = value;
      }
    }

    /// <summary>Field number for the "mouth_shrug_lower" field.</summary>
    public const int MouthShrugLowerFieldNumber = 42;
    private float mouthShrugLower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthShrugLower {
      get { return mouthShrugLower_; }
      set {
        mouthShrugLower_ = value;
      }
    }

    /// <summary>Field number for the "mouth_shrug_upper" field.</summary>
    public const int MouthShrugUpperFieldNumber = 43;
    private float mouthShrugUpper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthShrugUpper {
      get { return mouthShrugUpper_; }
      set {
        mouthShrugUpper_ = value;
      }
    }

    /// <summary>Field number for the "mouth_smile_left" field.</summary>
    public const int MouthSmileLeftFieldNumber = 44;
    private float mouthSmileLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthSmileLeft {
      get { return mouthSmileLeft_; }
      set {
        mouthSmileLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_smile_right" field.</summary>
    public const int MouthSmileRightFieldNumber = 45;
    private float mouthSmileRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthSmileRight {
      get { return mouthSmileRight_; }
      set {
        mouthSmileRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_stretch_left" field.</summary>
    public const int MouthStretchLeftFieldNumber = 46;
    private float mouthStretchLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthStretchLeft {
      get { return mouthStretchLeft_; }
      set {
        mouthStretchLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_stretch_right" field.</summary>
    public const int MouthStretchRightFieldNumber = 47;
    private float mouthStretchRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthStretchRight {
      get { return mouthStretchRight_; }
      set {
        mouthStretchRight_ = value;
      }
    }

    /// <summary>Field number for the "mouth_upper_up_left" field.</summary>
    public const int MouthUpperUpLeftFieldNumber = 48;
    private float mouthUpperUpLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthUpperUpLeft {
      get { return mouthUpperUpLeft_; }
      set {
        mouthUpperUpLeft_ = value;
      }
    }

    /// <summary>Field number for the "mouth_upper_up_right" field.</summary>
    public const int MouthUpperUpRightFieldNumber = 49;
    private float mouthUpperUpRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MouthUpperUpRight {
      get { return mouthUpperUpRight_; }
      set {
        mouthUpperUpRight_ = value;
      }
    }

    /// <summary>Field number for the "nose_sneer_left" field.</summary>
    public const int NoseSneerLeftFieldNumber = 50;
    private float noseSneerLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoseSneerLeft {
      get { return noseSneerLeft_; }
      set {
        noseSneerLeft_ = value;
      }
    }

    /// <summary>Field number for the "nose_sneer_right" field.</summary>
    public const int NoseSneerRightFieldNumber = 51;
    private float noseSneerRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoseSneerRight {
      get { return noseSneerRight_; }
      set {
        noseSneerRight_ = value;
      }
    }

    /// <summary>Field number for the "tongue_out" field.</summary>
    public const int TongueOutFieldNumber = 52;
    private float tongueOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TongueOut {
      get { return tongueOut_; }
      set {
        tongueOut_ = value;
      }
    }

    /// <summary>Field number for the "head_roll" field.</summary>
    public const int HeadRollFieldNumber = 53;
    private float headRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadRoll {
      get { return headRoll_; }
      set {
        headRoll_ = value;
      }
    }

    /// <summary>Field number for the "head_pitch" field.</summary>
    public const int HeadPitchFieldNumber = 54;
    private float headPitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadPitch {
      get { return headPitch_; }
      set {
        headPitch_ = value;
      }
    }

    /// <summary>Field number for the "head_yaw" field.</summary>
    public const int HeadYawFieldNumber = 55;
    private float headYaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadYaw {
      get { return headYaw_; }
      set {
        headYaw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ARKitBlendShapes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ARKitBlendShapes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowDownLeft, other.BrowDownLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowDownRight, other.BrowDownRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowInnerUp, other.BrowInnerUp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowOuterUpLeft, other.BrowOuterUpLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowOuterUpRight, other.BrowOuterUpRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekPuff, other.CheekPuff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekSquintLeft, other.CheekSquintLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekSquintRight, other.CheekSquintRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeBlinkLeft, other.EyeBlinkLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeBlinkRight, other.EyeBlinkRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookDownLeft, other.EyeLookDownLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookDownRight, other.EyeLookDownRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookInLeft, other.EyeLookInLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookInRight, other.EyeLookInRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookOutLeft, other.EyeLookOutLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookOutRight, other.EyeLookOutRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookUpLeft, other.EyeLookUpLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookUpRight, other.EyeLookUpRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeSquintLeft, other.EyeSquintLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeSquintRight, other.EyeSquintRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeWideLeft, other.EyeWideLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeWideRight, other.EyeWideRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawForward, other.JawForward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawLeft, other.JawLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawOpen, other.JawOpen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawRight, other.JawRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthClose, other.MouthClose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthDimpleLeft, other.MouthDimpleLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthDimpleRight, other.MouthDimpleRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFrownLeft, other.MouthFrownLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFrownRight, other.MouthFrownRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFunnel, other.MouthFunnel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLeft, other.MouthLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLowerDownLeft, other.MouthLowerDownLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLowerDownRight, other.MouthLowerDownRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPressLeft, other.MouthPressLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPressRight, other.MouthPressRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPucker, other.MouthPucker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRight, other.MouthRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRollLower, other.MouthRollLower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRollUpper, other.MouthRollUpper)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthShrugLower, other.MouthShrugLower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthShrugUpper, other.MouthShrugUpper)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthSmileLeft, other.MouthSmileLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthSmileRight, other.MouthSmileRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthStretchLeft, other.MouthStretchLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthStretchRight, other.MouthStretchRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthUpperUpLeft, other.MouthUpperUpLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthUpperUpRight, other.MouthUpperUpRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoseSneerLeft, other.NoseSneerLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoseSneerRight, other.NoseSneerRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TongueOut, other.TongueOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadRoll, other.HeadRoll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadPitch, other.HeadPitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadYaw, other.HeadYaw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrowDownLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowDownLeft);
      if (BrowDownRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowDownRight);
      if (BrowInnerUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowInnerUp);
      if (BrowOuterUpLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowOuterUpLeft);
      if (BrowOuterUpRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowOuterUpRight);
      if (CheekPuff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekPuff);
      if (CheekSquintLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekSquintLeft);
      if (CheekSquintRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekSquintRight);
      if (EyeBlinkLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeBlinkLeft);
      if (EyeBlinkRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeBlinkRight);
      if (EyeLookDownLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookDownLeft);
      if (EyeLookDownRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookDownRight);
      if (EyeLookInLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookInLeft);
      if (EyeLookInRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookInRight);
      if (EyeLookOutLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookOutLeft);
      if (EyeLookOutRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookOutRight);
      if (EyeLookUpLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookUpLeft);
      if (EyeLookUpRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookUpRight);
      if (EyeSquintLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeSquintLeft);
      if (EyeSquintRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeSquintRight);
      if (EyeWideLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeWideLeft);
      if (EyeWideRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeWideRight);
      if (JawForward != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawForward);
      if (JawLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawLeft);
      if (JawOpen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawOpen);
      if (JawRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawRight);
      if (MouthClose != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthClose);
      if (MouthDimpleLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthDimpleLeft);
      if (MouthDimpleRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthDimpleRight);
      if (MouthFrownLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFrownLeft);
      if (MouthFrownRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFrownRight);
      if (MouthFunnel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFunnel);
      if (MouthLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLeft);
      if (MouthLowerDownLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLowerDownLeft);
      if (MouthLowerDownRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLowerDownRight);
      if (MouthPressLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPressLeft);
      if (MouthPressRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPressRight);
      if (MouthPucker != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPucker);
      if (MouthRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRight);
      if (MouthRollLower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRollLower);
      if (MouthRollUpper != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRollUpper);
      if (MouthShrugLower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthShrugLower);
      if (MouthShrugUpper != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthShrugUpper);
      if (MouthSmileLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthSmileLeft);
      if (MouthSmileRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthSmileRight);
      if (MouthStretchLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthStretchLeft);
      if (MouthStretchRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthStretchRight);
      if (MouthUpperUpLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthUpperUpLeft);
      if (MouthUpperUpRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthUpperUpRight);
      if (NoseSneerLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoseSneerLeft);
      if (NoseSneerRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoseSneerRight);
      if (TongueOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TongueOut);
      if (HeadRoll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadRoll);
      if (HeadPitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadPitch);
      if (HeadYaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadYaw);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrowDownLeft != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BrowDownLeft);
      }
      if (BrowDownRight != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BrowDownRight);
      }
      if (BrowInnerUp != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BrowInnerUp);
      }
      if (BrowOuterUpLeft != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BrowOuterUpLeft);
      }
      if (BrowOuterUpRight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BrowOuterUpRight);
      }
      if (CheekPuff != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CheekPuff);
      }
      if (CheekSquintLeft != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CheekSquintLeft);
      }
      if (CheekSquintRight != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CheekSquintRight);
      }
      if (EyeBlinkLeft != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(EyeBlinkLeft);
      }
      if (EyeBlinkRight != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(EyeBlinkRight);
      }
      if (EyeLookDownLeft != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(EyeLookDownLeft);
      }
      if (EyeLookDownRight != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(EyeLookDownRight);
      }
      if (EyeLookInLeft != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(EyeLookInLeft);
      }
      if (EyeLookInRight != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(EyeLookInRight);
      }
      if (EyeLookOutLeft != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(EyeLookOutLeft);
      }
      if (EyeLookOutRight != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(EyeLookOutRight);
      }
      if (EyeLookUpLeft != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(EyeLookUpLeft);
      }
      if (EyeLookUpRight != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(EyeLookUpRight);
      }
      if (EyeSquintLeft != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(EyeSquintLeft);
      }
      if (EyeSquintRight != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(EyeSquintRight);
      }
      if (EyeWideLeft != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(EyeWideLeft);
      }
      if (EyeWideRight != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(EyeWideRight);
      }
      if (JawForward != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(JawForward);
      }
      if (JawLeft != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(JawLeft);
      }
      if (JawOpen != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(JawOpen);
      }
      if (JawRight != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(JawRight);
      }
      if (MouthClose != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(MouthClose);
      }
      if (MouthDimpleLeft != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(MouthDimpleLeft);
      }
      if (MouthDimpleRight != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(MouthDimpleRight);
      }
      if (MouthFrownLeft != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(MouthFrownLeft);
      }
      if (MouthFrownRight != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(MouthFrownRight);
      }
      if (MouthFunnel != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(MouthFunnel);
      }
      if (MouthLeft != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MouthLeft);
      }
      if (MouthLowerDownLeft != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(MouthLowerDownLeft);
      }
      if (MouthLowerDownRight != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(MouthLowerDownRight);
      }
      if (MouthPressLeft != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(MouthPressLeft);
      }
      if (MouthPressRight != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(MouthPressRight);
      }
      if (MouthPucker != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(MouthPucker);
      }
      if (MouthRight != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(MouthRight);
      }
      if (MouthRollLower != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(MouthRollLower);
      }
      if (MouthRollUpper != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(MouthRollUpper);
      }
      if (MouthShrugLower != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(MouthShrugLower);
      }
      if (MouthShrugUpper != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(MouthShrugUpper);
      }
      if (MouthSmileLeft != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(MouthSmileLeft);
      }
      if (MouthSmileRight != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(MouthSmileRight);
      }
      if (MouthStretchLeft != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(MouthStretchLeft);
      }
      if (MouthStretchRight != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(MouthStretchRight);
      }
      if (MouthUpperUpLeft != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(MouthUpperUpLeft);
      }
      if (MouthUpperUpRight != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(MouthUpperUpRight);
      }
      if (NoseSneerLeft != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(NoseSneerLeft);
      }
      if (NoseSneerRight != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(NoseSneerRight);
      }
      if (TongueOut != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(TongueOut);
      }
      if (HeadRoll != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(HeadRoll);
      }
      if (HeadPitch != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(HeadPitch);
      }
      if (HeadYaw != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(HeadYaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrowDownLeft != 0F) {
        size += 1 + 4;
      }
      if (BrowDownRight != 0F) {
        size += 1 + 4;
      }
      if (BrowInnerUp != 0F) {
        size += 1 + 4;
      }
      if (BrowOuterUpLeft != 0F) {
        size += 1 + 4;
      }
      if (BrowOuterUpRight != 0F) {
        size += 1 + 4;
      }
      if (CheekPuff != 0F) {
        size += 1 + 4;
      }
      if (CheekSquintLeft != 0F) {
        size += 1 + 4;
      }
      if (CheekSquintRight != 0F) {
        size += 1 + 4;
      }
      if (EyeBlinkLeft != 0F) {
        size += 1 + 4;
      }
      if (EyeBlinkRight != 0F) {
        size += 1 + 4;
      }
      if (EyeLookDownLeft != 0F) {
        size += 1 + 4;
      }
      if (EyeLookDownRight != 0F) {
        size += 1 + 4;
      }
      if (EyeLookInLeft != 0F) {
        size += 1 + 4;
      }
      if (EyeLookInRight != 0F) {
        size += 1 + 4;
      }
      if (EyeLookOutLeft != 0F) {
        size += 1 + 4;
      }
      if (EyeLookOutRight != 0F) {
        size += 2 + 4;
      }
      if (EyeLookUpLeft != 0F) {
        size += 2 + 4;
      }
      if (EyeLookUpRight != 0F) {
        size += 2 + 4;
      }
      if (EyeSquintLeft != 0F) {
        size += 2 + 4;
      }
      if (EyeSquintRight != 0F) {
        size += 2 + 4;
      }
      if (EyeWideLeft != 0F) {
        size += 2 + 4;
      }
      if (EyeWideRight != 0F) {
        size += 2 + 4;
      }
      if (JawForward != 0F) {
        size += 2 + 4;
      }
      if (JawLeft != 0F) {
        size += 2 + 4;
      }
      if (JawOpen != 0F) {
        size += 2 + 4;
      }
      if (JawRight != 0F) {
        size += 2 + 4;
      }
      if (MouthClose != 0F) {
        size += 2 + 4;
      }
      if (MouthDimpleLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthDimpleRight != 0F) {
        size += 2 + 4;
      }
      if (MouthFrownLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthFrownRight != 0F) {
        size += 2 + 4;
      }
      if (MouthFunnel != 0F) {
        size += 2 + 4;
      }
      if (MouthLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthLowerDownLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthLowerDownRight != 0F) {
        size += 2 + 4;
      }
      if (MouthPressLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthPressRight != 0F) {
        size += 2 + 4;
      }
      if (MouthPucker != 0F) {
        size += 2 + 4;
      }
      if (MouthRight != 0F) {
        size += 2 + 4;
      }
      if (MouthRollLower != 0F) {
        size += 2 + 4;
      }
      if (MouthRollUpper != 0F) {
        size += 2 + 4;
      }
      if (MouthShrugLower != 0F) {
        size += 2 + 4;
      }
      if (MouthShrugUpper != 0F) {
        size += 2 + 4;
      }
      if (MouthSmileLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthSmileRight != 0F) {
        size += 2 + 4;
      }
      if (MouthStretchLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthStretchRight != 0F) {
        size += 2 + 4;
      }
      if (MouthUpperUpLeft != 0F) {
        size += 2 + 4;
      }
      if (MouthUpperUpRight != 0F) {
        size += 2 + 4;
      }
      if (NoseSneerLeft != 0F) {
        size += 2 + 4;
      }
      if (NoseSneerRight != 0F) {
        size += 2 + 4;
      }
      if (TongueOut != 0F) {
        size += 2 + 4;
      }
      if (HeadRoll != 0F) {
        size += 2 + 4;
      }
      if (HeadPitch != 0F) {
        size += 2 + 4;
      }
      if (HeadYaw != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ARKitBlendShapes other) {
      if (other == null) {
        return;
      }
      if (other.BrowDownLeft != 0F) {
        BrowDownLeft = other.BrowDownLeft;
      }
      if (other.BrowDownRight != 0F) {
        BrowDownRight = other.BrowDownRight;
      }
      if (other.BrowInnerUp != 0F) {
        BrowInnerUp = other.BrowInnerUp;
      }
      if (other.BrowOuterUpLeft != 0F) {
        BrowOuterUpLeft = other.BrowOuterUpLeft;
      }
      if (other.BrowOuterUpRight != 0F) {
        BrowOuterUpRight = other.BrowOuterUpRight;
      }
      if (other.CheekPuff != 0F) {
        CheekPuff = other.CheekPuff;
      }
      if (other.CheekSquintLeft != 0F) {
        CheekSquintLeft = other.CheekSquintLeft;
      }
      if (other.CheekSquintRight != 0F) {
        CheekSquintRight = other.CheekSquintRight;
      }
      if (other.EyeBlinkLeft != 0F) {
        EyeBlinkLeft = other.EyeBlinkLeft;
      }
      if (other.EyeBlinkRight != 0F) {
        EyeBlinkRight = other.EyeBlinkRight;
      }
      if (other.EyeLookDownLeft != 0F) {
        EyeLookDownLeft = other.EyeLookDownLeft;
      }
      if (other.EyeLookDownRight != 0F) {
        EyeLookDownRight = other.EyeLookDownRight;
      }
      if (other.EyeLookInLeft != 0F) {
        EyeLookInLeft = other.EyeLookInLeft;
      }
      if (other.EyeLookInRight != 0F) {
        EyeLookInRight = other.EyeLookInRight;
      }
      if (other.EyeLookOutLeft != 0F) {
        EyeLookOutLeft = other.EyeLookOutLeft;
      }
      if (other.EyeLookOutRight != 0F) {
        EyeLookOutRight = other.EyeLookOutRight;
      }
      if (other.EyeLookUpLeft != 0F) {
        EyeLookUpLeft = other.EyeLookUpLeft;
      }
      if (other.EyeLookUpRight != 0F) {
        EyeLookUpRight = other.EyeLookUpRight;
      }
      if (other.EyeSquintLeft != 0F) {
        EyeSquintLeft = other.EyeSquintLeft;
      }
      if (other.EyeSquintRight != 0F) {
        EyeSquintRight = other.EyeSquintRight;
      }
      if (other.EyeWideLeft != 0F) {
        EyeWideLeft = other.EyeWideLeft;
      }
      if (other.EyeWideRight != 0F) {
        EyeWideRight = other.EyeWideRight;
      }
      if (other.JawForward != 0F) {
        JawForward = other.JawForward;
      }
      if (other.JawLeft != 0F) {
        JawLeft = other.JawLeft;
      }
      if (other.JawOpen != 0F) {
        JawOpen = other.JawOpen;
      }
      if (other.JawRight != 0F) {
        JawRight = other.JawRight;
      }
      if (other.MouthClose != 0F) {
        MouthClose = other.MouthClose;
      }
      if (other.MouthDimpleLeft != 0F) {
        MouthDimpleLeft = other.MouthDimpleLeft;
      }
      if (other.MouthDimpleRight != 0F) {
        MouthDimpleRight = other.MouthDimpleRight;
      }
      if (other.MouthFrownLeft != 0F) {
        MouthFrownLeft = other.MouthFrownLeft;
      }
      if (other.MouthFrownRight != 0F) {
        MouthFrownRight = other.MouthFrownRight;
      }
      if (other.MouthFunnel != 0F) {
        MouthFunnel = other.MouthFunnel;
      }
      if (other.MouthLeft != 0F) {
        MouthLeft = other.MouthLeft;
      }
      if (other.MouthLowerDownLeft != 0F) {
        MouthLowerDownLeft = other.MouthLowerDownLeft;
      }
      if (other.MouthLowerDownRight != 0F) {
        MouthLowerDownRight = other.MouthLowerDownRight;
      }
      if (other.MouthPressLeft != 0F) {
        MouthPressLeft = other.MouthPressLeft;
      }
      if (other.MouthPressRight != 0F) {
        MouthPressRight = other.MouthPressRight;
      }
      if (other.MouthPucker != 0F) {
        MouthPucker = other.MouthPucker;
      }
      if (other.MouthRight != 0F) {
        MouthRight = other.MouthRight;
      }
      if (other.MouthRollLower != 0F) {
        MouthRollLower = other.MouthRollLower;
      }
      if (other.MouthRollUpper != 0F) {
        MouthRollUpper = other.MouthRollUpper;
      }
      if (other.MouthShrugLower != 0F) {
        MouthShrugLower = other.MouthShrugLower;
      }
      if (other.MouthShrugUpper != 0F) {
        MouthShrugUpper = other.MouthShrugUpper;
      }
      if (other.MouthSmileLeft != 0F) {
        MouthSmileLeft = other.MouthSmileLeft;
      }
      if (other.MouthSmileRight != 0F) {
        MouthSmileRight = other.MouthSmileRight;
      }
      if (other.MouthStretchLeft != 0F) {
        MouthStretchLeft = other.MouthStretchLeft;
      }
      if (other.MouthStretchRight != 0F) {
        MouthStretchRight = other.MouthStretchRight;
      }
      if (other.MouthUpperUpLeft != 0F) {
        MouthUpperUpLeft = other.MouthUpperUpLeft;
      }
      if (other.MouthUpperUpRight != 0F) {
        MouthUpperUpRight = other.MouthUpperUpRight;
      }
      if (other.NoseSneerLeft != 0F) {
        NoseSneerLeft = other.NoseSneerLeft;
      }
      if (other.NoseSneerRight != 0F) {
        NoseSneerRight = other.NoseSneerRight;
      }
      if (other.TongueOut != 0F) {
        TongueOut = other.TongueOut;
      }
      if (other.HeadRoll != 0F) {
        HeadRoll = other.HeadRoll;
      }
      if (other.HeadPitch != 0F) {
        HeadPitch = other.HeadPitch;
      }
      if (other.HeadYaw != 0F) {
        HeadYaw = other.HeadYaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            BrowDownLeft = input.ReadFloat();
            break;
          }
          case 21: {
            BrowDownRight = input.ReadFloat();
            break;
          }
          case 29: {
            BrowInnerUp = input.ReadFloat();
            break;
          }
          case 37: {
            BrowOuterUpLeft = input.ReadFloat();
            break;
          }
          case 45: {
            BrowOuterUpRight = input.ReadFloat();
            break;
          }
          case 53: {
            CheekPuff = input.ReadFloat();
            break;
          }
          case 61: {
            CheekSquintLeft = input.ReadFloat();
            break;
          }
          case 69: {
            CheekSquintRight = input.ReadFloat();
            break;
          }
          case 77: {
            EyeBlinkLeft = input.ReadFloat();
            break;
          }
          case 85: {
            EyeBlinkRight = input.ReadFloat();
            break;
          }
          case 93: {
            EyeLookDownLeft = input.ReadFloat();
            break;
          }
          case 101: {
            EyeLookDownRight = input.ReadFloat();
            break;
          }
          case 109: {
            EyeLookInLeft = input.ReadFloat();
            break;
          }
          case 117: {
            EyeLookInRight = input.ReadFloat();
            break;
          }
          case 125: {
            EyeLookOutLeft = input.ReadFloat();
            break;
          }
          case 133: {
            EyeLookOutRight = input.ReadFloat();
            break;
          }
          case 141: {
            EyeLookUpLeft = input.ReadFloat();
            break;
          }
          case 149: {
            EyeLookUpRight = input.ReadFloat();
            break;
          }
          case 157: {
            EyeSquintLeft = input.ReadFloat();
            break;
          }
          case 165: {
            EyeSquintRight = input.ReadFloat();
            break;
          }
          case 173: {
            EyeWideLeft = input.ReadFloat();
            break;
          }
          case 181: {
            EyeWideRight = input.ReadFloat();
            break;
          }
          case 189: {
            JawForward = input.ReadFloat();
            break;
          }
          case 197: {
            JawLeft = input.ReadFloat();
            break;
          }
          case 205: {
            JawOpen = input.ReadFloat();
            break;
          }
          case 213: {
            JawRight = input.ReadFloat();
            break;
          }
          case 221: {
            MouthClose = input.ReadFloat();
            break;
          }
          case 229: {
            MouthDimpleLeft = input.ReadFloat();
            break;
          }
          case 237: {
            MouthDimpleRight = input.ReadFloat();
            break;
          }
          case 245: {
            MouthFrownLeft = input.ReadFloat();
            break;
          }
          case 253: {
            MouthFrownRight = input.ReadFloat();
            break;
          }
          case 261: {
            MouthFunnel = input.ReadFloat();
            break;
          }
          case 269: {
            MouthLeft = input.ReadFloat();
            break;
          }
          case 277: {
            MouthLowerDownLeft = input.ReadFloat();
            break;
          }
          case 285: {
            MouthLowerDownRight = input.ReadFloat();
            break;
          }
          case 293: {
            MouthPressLeft = input.ReadFloat();
            break;
          }
          case 301: {
            MouthPressRight = input.ReadFloat();
            break;
          }
          case 309: {
            MouthPucker = input.ReadFloat();
            break;
          }
          case 317: {
            MouthRight = input.ReadFloat();
            break;
          }
          case 325: {
            MouthRollLower = input.ReadFloat();
            break;
          }
          case 333: {
            MouthRollUpper = input.ReadFloat();
            break;
          }
          case 341: {
            MouthShrugLower = input.ReadFloat();
            break;
          }
          case 349: {
            MouthShrugUpper = input.ReadFloat();
            break;
          }
          case 357: {
            MouthSmileLeft = input.ReadFloat();
            break;
          }
          case 365: {
            MouthSmileRight = input.ReadFloat();
            break;
          }
          case 373: {
            MouthStretchLeft = input.ReadFloat();
            break;
          }
          case 381: {
            MouthStretchRight = input.ReadFloat();
            break;
          }
          case 389: {
            MouthUpperUpLeft = input.ReadFloat();
            break;
          }
          case 397: {
            MouthUpperUpRight = input.ReadFloat();
            break;
          }
          case 405: {
            NoseSneerLeft = input.ReadFloat();
            break;
          }
          case 413: {
            NoseSneerRight = input.ReadFloat();
            break;
          }
          case 421: {
            TongueOut = input.ReadFloat();
            break;
          }
          case 429: {
            HeadRoll = input.ReadFloat();
            break;
          }
          case 437: {
            HeadPitch = input.ReadFloat();
            break;
          }
          case 445: {
            HeadYaw = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A wrapper message that includes both FrameTiming and ARKitBlendShapes
  /// </summary>
  public sealed partial class BlendshapeFrame : pb::IMessage<BlendshapeFrame> {
    private static readonly pb::MessageParser<BlendshapeFrame> _parser = new pb::MessageParser<BlendshapeFrame>(() => new BlendshapeFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlendshapeFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.ArkitBlendShapesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlendshapeFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlendshapeFrame(BlendshapeFrame other) : this() {
      frameIndex_ = other.frameIndex_;
      fps_ = other.fps_;
      blendshapes_ = other.blendshapes_ != null ? other.blendshapes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlendshapeFrame Clone() {
      return new BlendshapeFrame(this);
    }

    /// <summary>Field number for the "frame_index" field.</summary>
    public const int FrameIndexFieldNumber = 1;
    private int frameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameIndex {
      get { return frameIndex_; }
      set {
        frameIndex_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 2;
    private float fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "blendshapes" field.</summary>
    public const int BlendshapesFieldNumber = 3;
    private global::Service.ARKitBlendShapes blendshapes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.ARKitBlendShapes Blendshapes {
      get { return blendshapes_; }
      set {
        blendshapes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlendshapeFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlendshapeFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameIndex != other.FrameIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fps, other.Fps)) return false;
      if (!object.Equals(Blendshapes, other.Blendshapes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
      if (Fps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fps);
      if (blendshapes_ != null) hash ^= Blendshapes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameIndex);
      }
      if (Fps != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Fps);
      }
      if (blendshapes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Blendshapes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
      }
      if (Fps != 0F) {
        size += 1 + 4;
      }
      if (blendshapes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blendshapes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlendshapeFrame other) {
      if (other == null) {
        return;
      }
      if (other.FrameIndex != 0) {
        FrameIndex = other.FrameIndex;
      }
      if (other.Fps != 0F) {
        Fps = other.Fps;
      }
      if (other.blendshapes_ != null) {
        if (blendshapes_ == null) {
          Blendshapes = new global::Service.ARKitBlendShapes();
        }
        Blendshapes.MergeFrom(other.Blendshapes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameIndex = input.ReadInt32();
            break;
          }
          case 21: {
            Fps = input.ReadFloat();
            break;
          }
          case 26: {
            if (blendshapes_ == null) {
              Blendshapes = new global::Service.ARKitBlendShapes();
            }
            input.ReadMessage(Blendshapes);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
